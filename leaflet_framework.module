<?php

/**
 * Implements hook_requirements().
 */
function leaflet_framework_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime' && !file_exists(libraries_get_path('Leaflet') . '/dist/leaflet.js')) {
    $requirements['leaflet_framework'] = array(
      'title' => t('Leaflet library not found'),
      'value' => t('The !leaflet javascript library was not found. Please !download it into the libraries folder.',
        array(
          '!leaflet' => l('Leaflet', 'http://leafletjs.com'),
          '!download' => l('download', 'http://leafletjs.com/download.html'),
        )
      ),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

/**
 * Implements hook_init().
 */
function leaflet_framework_init() {
  foreach (leaflet_framework_maps() as $id => $map) {
    MapManager::register($id, $map);
  }
}

/**
 * Implements hook_libraries_info().
 */
function leaflet_framework_libraries_info() {
  return array(
    'leaflet' => array(
      'name' => 'Leaflet',
      'vendor url' => 'https://github.com/affinitybridge/leaflet_framework',
      'download url' => 'git@github.com:affinitybridge/leaflet_framework.git',
      'path' => 'dist',
      'version' => '0.5.1',
      'files' => array(
        'js' => array(
          'leaflet-src.js',
        ),
        'css' => array(
          'leaflet.css' => array(),
          'leaflet.ie.css' => array(
            'type' => 'file',
            'media' => 'screen',
            'browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_library().
 */
function leaflet_framework_library() {
  $libraries = array();

  $leaflet = libraries_detect('leaflet');
  if ($leaflet) {
    $libraries['Leaflet'] = leaflet_framework_convert_libraries($leaflet);
    $leaflet_path = base_path() . libraries_get_path('leaflet');
    $libraries['Leaflet']['js'][] = array(
      'type' => 'inline',
      'data' => "L.Icon.Default.imagePath = '$leaflet_path/dist/images';",
      'group' => JS_LIBRARY,
      'preprocess' => FALSE
    );
  }

  $path = drupal_get_path('module', 'leaflet_framework');

  $libraries['DrupalAttachBehavior'] = array(
    'title' => 'Attach behavior',
    'version' => '7.x-1.x',
    'js' => array(
      $path . '/js/DrupalAttachBehavior.js' => array(),
    ),
    'dependencies' => array(
      array('leaflet_framework', 'LeafletFramework'),
    ),
  );

  $libraries['LeafletFramework'] = array(
    'title' => 'LeafletFramework',
    'version' => '7.x-1.x',
    'js' => array(
      $path . '/js/LeafletFramework/LeafletFramework.js' => array(),
      $path . '/js/LeafletFramework/Util.js' => array(),
      $path . '/js/LeafletFramework/Plugin.js' => array(),
      $path . '/js/LeafletFramework/Core.js' => array(),
    ),
    'dependencies' => array(
      array('leaflet_framework', 'Leaflet'),
    ),
  );

  $libraries['LayersPlugin'] = array(
    'title' => 'LayersPlugin',
    'version' => '7.x-1.x',
    'js' => array(
      $path . '/js/LeafletFramework/Handlers/Layers.js' => array(),
      $path . '/js/LeafletFramework/Plugins/LayersPlugin.js' => array(),
    ),
    'dependencies' => array(
       array('leaflet_framework', 'LeafletFramework'),
    ),
  );

  $libraries['ViewPlugin'] = array(
    'title' => 'ViewPlugin',
    'version' => '7.x-1.x',
    'js' => array(
      $path . '/js/LeafletFramework/Handlers/View.js' => array(),
      $path . '/js/LeafletFramework/Plugins/ViewPlugin.js' => array(),
    ),
    'dependencies' => array(
      array('leaflet_framework', 'LeafletFramework'),
    ),
  );

  $libraries['ScalePlugin'] = array(
    'title' => 'ScalePlugin',
    'version' => '7.x-1.x',
    'js' => array(
      $path . '/js/LeafletFramework/Plugins/ScalePlugin.js' => array(),
    ),
    'dependencies' => array(
      array('leaflet_framework', 'LeafletFramework'),
    ),
  );

  return $libraries;
}

/**
 * Converts a Libraries module 2.x library definition to a version compatible
 * with core's hook_library().
 */
function leaflet_framework_convert_libraries($library) {
  $path = "{$library['library path']}";
  if (isset($library['path'])) {
    $path .= "/{$library['path']}";
  }

  foreach ($library['files'] as $type => $files) {
    $definition = array();
    foreach ($files as $file_name => $opts) {
      $definition["$path/$file_name"] = $opts;
    }
    $library[$type] = $definition;
  }

  $library['title'] = $library['name'];

  return $library;
}

/**
 * Implements hook_theme().
 */
function leaflet_framework_theme($existing, $type, $theme, $path) {
  return array(
    'lf_map' => array(
      'variables' => array('map_id' => NULL, 'height' => '550px'),
      'template' => 'lf_map',
    ),
  );
}

/**
 * Drupal template preprocess function.
 */
function leaflet_framework_preprocess_lf_map($vars) {
  $map_id = $vars['map_id'];
  $map = MapManager::get($map_id);
  _leaflet_framework_flush_extensions($map_id, $map);
}

/**
 * Create a new map with default settings & plugins.
 */
function leaflet_framework_default_map() {
  $default = new Map(array('height' => '550px'));
  $default->addPlugin('layers', leaflet_framework_plugin('lf_layers'))
          ->addPlugin('view', leaflet_framework_plugin('lf_view'));
  return $default;
}

/**
 * Implements hook_leaflet_framework_plugins().
 */
function leaflet_framework_leaflet_framework_plugins() {
  $plugins = array();

  /* Default layers plugin.
   * - Adds layers to a map as either base layers or overlays.
   * - Adds an optional layer switcher control to the map.
   */
  $plugins['lf_layers'] = array(
    'library' => array('leaflet_framework', 'LayersPlugin'),
    'logical' => 'LF.Plugin.Layers',
    'defaults' => array(
      'switcher' => array('position' => 'topright'),
      'layers' => array(
        array(
          'title' => 'OSM',
          'url' => 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          'type' => 'base',
        ),
      ),
    ),
  );

  /* Default map view plugin.
   * - Sets map center and zoom level.
   */
  $plugins['lf_view'] = array(
    'library' => array('leaflet_framework', 'ViewPlugin'),
    'logical' => 'LF.Plugin.View',
    'defaults' => array(
      'center' => array(
        'lat' => 0.0,
        'lon' => 0.0
      ),
      'zoom' => 3,
      'auto' => NULL,
    ),
  );

  /* Default map scale plugin.
   * - Adds the Leaflet scale control to a map.
   */
  $plugins['lf_scale'] = array(
    'library' => array('leaflet_framework', 'ScalePlugin'),
    'logical' => 'LF.Plugin.Scale',
  );

  return $plugins;
}

/**
 * Get a map definition.
 * Declares: hook_leaflet_framework_maps().
 */
function leaflet_framework_maps($name = NULL) {
  $maps = module_invoke_all('leaflet_framework_maps');

  if (empty($name)) {
    return $maps;
  }

  return isset($maps[$name]) ? $maps[$name] : FALSE;
}

/**
 * Declares: hook_leaflet_framework_plugins().
 */
function _leaflet_framework_plugins($reset = FALSE) {
  if (!($cache = cache_get('leaflet_framework:plugin_definitions')) || $reset) {
    $plugins = module_invoke_all('leaflet_framework_plugins');
    cache_set('leaflet_framework:plugin_definitions', $plugins);
    return $plugins;
  }
  return $cache->data;
}

/**
 * Get a plugin
 */
function leaflet_framework_plugin($name, $settings = NULL) {
  $plugins = _leaflet_framework_plugins();
  if (!isset($plugins[$name])) {
    throw new Exception("Unknown plugin definition '$name'");
  }

  // TODO: Evaluate whether this is needed anymore.
  drupal_alter('leaflet_framework_plugins', $plugins);

  $plugin = $plugins[$name];

  // Only use defaults if *nothing* is provided.
  if (is_null($settings)) {
    $settings = isset($plugin['defaults']) ? $plugin['defaults'] : array();
  }

  $settings['library'] = $plugin['library'];

  if (isset($plugin['logical'])) {
    $settings['logical'] = $plugin['logical'];
  }

  return new GenericPlugin($settings);
}

/**
 * Create a Leaflet map.
 */
function leaflet_framework_map($map_id, $extensions = array(), $defaults = array()) {
  $map = MapManager::get($map_id);
  if (!$map) {
    $map = leaflet_framework_default_map();
    MapManager::register($map_id, $map);
  }

  foreach ($extensions as $plugin_name => $options) {
    leaflet_framework_extend_map($plugin_name, $map_id, $options);
  }

  return array(
    '#attached' => array(
      'library' => array(
        array('leaflet_framework', 'DrupalAttachBehavior'),
      ),
      'js' =>  array(
        array('data' => array(
          'leaflet_framework' => array($map_id => array()),
        ), 'type' => 'setting'),
      ),
    ),
    '#theme' => 'lf_map',
    //'#height' => $map-> // TODO: Figure out where height comes from.
    '#map_id' => $map_id
  );
}

function leaflet_framework_extend_map($plugin, $map_id, $extension = array()) {
  $map = MapManager::get($map_id);
  $map->extend($plugin, $extension);
  if ($map->isRendered()) {
    // TODO: Set $map_id in map constructor.
    _leaflet_framework_flush_extensions($map_id, $map);
  }
}

/**
 *
 */
function _leaflet_framework_flush_extensions($map_id, $map) {
  $plugins = $map->render();

  // Ensure all required libraries are included.
  foreach ($map->plugins() as $name => $plugin) {
    $library = $plugin->library();
    drupal_add_library($library[0], $library[1]);
    if (isset($library[2])) {
      $plugins[$name]['logical'] = $library[2];
    }
  }

  // error_log("leaflet_framework_preprocess_lf_map() $map_id " . print_r($plugins, 1));

  drupal_add_js(array('leaflet_framework' => array(
    $map_id => array(
      'defaults' => $map->defaults(),
      'plugins' => $plugins,
    ),
  )), 'setting');
}
